{"version":3,"sources":["components/Dish.js","components/RandomDish.js","App.js","serviceWorker.js","index.js"],"names":["Dish","title","placeholder","color","dishType","useState","inputText","setInputText","dishesList","setDishesList","deleteDish","e","dishes","dishId","target","getAttribute","localStorage","getItem","JSON","parse","splice","setItem","stringify","useEffect","className","onChange","value","type","onClick","preventDefault","push","map","dish","index","key","data-key","RandomDish","randomDish","setRandomDish","generateRandomDish","length","randomIndex","Math","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.305702ac.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Dish({ title, placeholder, color, dishType }) {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [dishesList, setDishesList] = useState([]);\r\n\r\n  const inputHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const addDish = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputText) {\r\n      let dishes;\r\n      if (localStorage.getItem(dishType) === null) {\r\n        dishes = [];\r\n      } else {\r\n        dishes = JSON.parse(localStorage.getItem(dishType));\r\n      }\r\n      dishes.push(inputText);\r\n      localStorage.setItem(dishType, JSON.stringify(dishes));\r\n\r\n      setDishesList(JSON.parse(localStorage.getItem(dishType)));\r\n      setInputText(\"\");\r\n    }\r\n  };\r\n\r\n  const deleteDish = (e) => {\r\n    let dishId = e.target.getAttribute(\"data-key\");\r\n\r\n    let dishes;\r\n    if (localStorage.getItem(dishType) === null) {\r\n      dishes = [];\r\n    } else {\r\n      dishes = JSON.parse(localStorage.getItem(dishType));\r\n    }\r\n    dishes.splice(dishId, 1);\r\n    localStorage.setItem(dishType, JSON.stringify(dishes));\r\n    setDishesList(dishes);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let dishes;\r\n    if (localStorage.getItem(dishType) === null) {\r\n      dishes = [];\r\n    } else {\r\n      dishes = JSON.parse(localStorage.getItem(dishType));\r\n    }\r\n    setDishesList(dishes);\r\n  }, [dishType]);\r\n\r\n  return (\r\n    <div className=\"w-full flex flex-col items-center mb-6\">\r\n      <h1 className={\"text-2xl text-\" + color + \"-500 m-2\"}>{title}</h1>\r\n      <div className=\"flex justify-center items-center\">\r\n        <input\r\n          onChange={inputHandler}\r\n          className={\r\n            \"bg-gray-200 appearance-none border-2 border-gray-200 rounded py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-\" +\r\n            color +\r\n            \"-500\"\r\n          }\r\n          type=\"text\"\r\n          value={inputText}\r\n          placeholder={placeholder}\r\n        />\r\n        <button\r\n          className={\r\n            \"bg-\" +\r\n            color +\r\n            \"-500 hover:bg-\" +\r\n            color +\r\n            \"-400 rounded ml-2 w-8 h-8\"\r\n          }\r\n          onClick={addDish}\r\n        >\r\n          <i className=\"text-white fas fa-check\"></i>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"m-2\">\r\n        <ul className=\"\">\r\n          {dishesList &&\r\n            dishesList.map((dish, index) => {\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className=\"flex m-2 items-center justify-center\"\r\n                >\r\n                  <p className=\"mr-5\">{dish}</p>\r\n                  <i\r\n                    onClick={deleteDish}\r\n                    data-key={index}\r\n                    className={\r\n                      \"ml-auto text-lg text-\" +\r\n                      color +\r\n                      \"-500 fas fa-trash-alt hover:text-\" +\r\n                      color +\r\n                      \"-400\"\r\n                    }\r\n                  ></i>\r\n                </li>\r\n              );\r\n            })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dish;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction RandomDish({ color, dishType }) {\r\n  const [randomDish, setRandomDish] = useState(\"\");\r\n\r\n  const generateRandomDish = () => {\r\n    let dishes;\r\n    if (localStorage.getItem(dishType) === null) {\r\n      dishes = [];\r\n    } else {\r\n      dishes = JSON.parse(localStorage.getItem(dishType));\r\n    }\r\n\r\n    if (dishes.length > 0) {\r\n      let randomIndex = Math.floor(Math.random() * Math.floor(dishes.length));\r\n      setRandomDish(dishes[randomIndex]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateRandomDish();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"w-full flex items-center justify-center\">\r\n      <p className=\"text-3xl text-gray-600 mr-4\">{randomDish}</p>\r\n      <i\r\n        onClick={generateRandomDish}\r\n        className={\r\n          \"fas fa-dice text-2xl text-\" +\r\n          color +\r\n          \"-500 hover:text-\" +\r\n          color +\r\n          \"-400\"\r\n        }\r\n      ></i>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomDish;\r\n","import React from \"react\";\nimport \"./tailwind.output.css\";\nimport Dish from \"./components/Dish\";\nimport RandomDish from \"./components/RandomDish\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-5xl text-gray-500 text-center m-4 mb-6\">Menu</h1>\n      <div className=\"flex flex-col sm:flex-row mb-6\">\n        <RandomDish color=\"green\" dishType=\"starters\"/>\n        <RandomDish color=\"orange\" dishType=\"dish\" />\n        <RandomDish color=\"indigo\" dishType=\"dessert\" />\n      </div>\n      <div className=\"flex flex-col sm:flex-row\">\n        <Dish title=\"Entrées\" placeholder=\"Ajouter une entrée\" color=\"green\" dishType=\"starters\" />\n        <Dish title=\"Plats\" placeholder=\"Ajouter un plat\" color=\"orange\" dishType=\"dish\" />\n        <Dish title=\"Dessert\" placeholder=\"Ajouter un dessert\" color=\"indigo\" dishType=\"dessert\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}